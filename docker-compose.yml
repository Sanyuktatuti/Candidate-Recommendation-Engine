version: '3.8'

services:
  # FastAPI Backend
  api:
    build: .
    container_name: candidate-rec-api
    ports:
      - "8000:8000"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - DEBUG=True
      - API_HOST=0.0.0.0
      - API_PORT=8000
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - candidate-rec-network

  # Streamlit Frontend
  frontend:
    build: .
    container_name: candidate-rec-frontend
    ports:
      - "8501:8501"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - API_HOST=api
      - API_PORT=8000
    command: ["streamlit", "run", "streamlit_app.py", "--server.address", "0.0.0.0", "--server.port", "8501"]
    depends_on:
      api:
        condition: service_healthy
    volumes:
      - ./data:/app/data
    restart: unless-stopped
    networks:
      - candidate-rec-network

  # Redis (for future caching/background jobs)
  redis:
    image: redis:7-alpine
    container_name: candidate-rec-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - candidate-rec-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx (reverse proxy for production)
  nginx:
    image: nginx:alpine
    container_name: candidate-rec-nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api
      - frontend
    restart: unless-stopped
    networks:
      - candidate-rec-network

volumes:
  redis_data:

networks:
  candidate-rec-network:
    driver: bridge
